<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mystudy.dao.StudentDao">
    <!--
        parameterType：表示dao接口中方法参数的数据类型。
            parameterType它的值是Java的数据类型的全限定名称或者mybatis定义的别名
            例如：parameterType = "java.lang.Integer"
                 parameterType = "int"


            注意：parameterType不是强制的，mybatis通过反射机制能够发现接口参数的数据类型。所以可以没有，一般不写

            使用#{}之后，mybatis执行sql是使用的jdbc中的PreparedStatement对象
            由mybatis执行下面的代码：
                1.mybatis创建Connection，PreparedStatement对象
                  String sql = "select * from student where id = ?";
                  PreparedStatement ps = conn.PreparedStatement(sql);
                  ps.setInt(1,id);
                2.执行sql封装为resultType="com.mystudy.entity.Student"这个对象
                  Result rs = ps.executeQuery();
                  Student student = new Student();
                  while(rs.next()){
                    //从数据库取一行数据，存到一个java实体类中
                    ...
                  }
                  return student;//给了dao方法调用的返回值
    -->
    <select id="selectStudentById" parameterType="int" resultType="com.mystudy.entity.Student">
        select * from student where id = #{studentid}
    </select>

    <!--多个参数，使用@Param命名-->
    <select id="selectStudentParam" resultType="com.mystudy.entity.Student">
        select * from student where id=#{sid} or age=#{sage}
    </select>

    <!--
        多个参数，使用java对象的属性值作为参数的实际值
        使用对象语法：#{属性名,javaType=类型名称,jdbc=数据类型} （完整的语法格式）很少用。
                    javaType：指java中的属性数据类型。
                    jdbcType：在数据库中的数据类型
                    例如：#{name,javaType="java.lang.String",jdbcType="varchar"}
           简化方式：#{属性名}，javaType，jdbcType的值mybatis反射能够获取。不用提供
    -->
    <select id="selectStudentObject" resultType="com.mystudy.entity.Student">
        select * from student where name=#{name} or age=#{age}
    </select>
    <select id="selectStudent" resultType="com.mystudy.entity.Student">
        select * from student where name=#{name} or age=#{age}
    </select>

    <!--多个参数使用位置传值-->
    <select id="selectStudentPosition" resultType="com.mystudy.entity.Student">
        select * from student where name=#{arg0} or age=#{arg1}
    </select>

    <!--多个参数使用map传值,#{map中的key值}-->
    <select id="selectStudentMap" resultType="com.mystudy.entity.Student">
        select * from student where name=#{name} or age=#{age}
    </select>

    <!--使用${}-->
    <select id="selectStudentUse$" resultType="com.mystudy.entity.Student">
        select * from student where name=${myname}
    </select>

    <!--$替换列名-->
    <select id="selectStudentUse$Order" resultType="com.mystudy.entity.Student">
        select * from student order by ${colName}
    </select>
</mapper>
